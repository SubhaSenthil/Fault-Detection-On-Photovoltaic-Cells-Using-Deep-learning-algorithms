/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package noncontact;

import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author SEABIRDS-PC
 */
public class FeatureReduction extends javax.swing.JFrame {

    /**
     * Creates new form FeatureExtraction
     */
    
    DecimalFormat df=new DecimalFormat("#.#");
    public static ArrayList attribId=new ArrayList();
    public static ArrayList unwantedFeatures=new ArrayList();
    
    public FeatureReduction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 51, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Feature reduction");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(jLabel1)
                .addContainerGap(300, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Feature Reduction using PCA based on Feature Extraction and Normalization");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("SVM Classification based on Feature Selection using SFFS Algorithm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        SVMClassification svm=new SVMClassification();
        svm.setTitle("SVM Classification");
        svm.setVisible(true);
        svm.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        jTextArea1.setText("");
        
            /* Pearson Correlation Analysis (PCA) for primary feature selection */
                
        // Pearson Correlation Analysis: https://en.wikipedia.org/wiki/Pearson_correlation_coefficient
        
        String dataset=MainFrame.dataset;
        
            // Step 1: Convert the wide range of values into real numbers between 0 and 1 by using the min-max normalization method.
        
        String minMaxNormalizedData=MinMaxNormalization(dataset);
        /*JOptionPane.showMessageDialog(this,"Min-Max Normalized Successfully!");
        jTextArea1.append("===============================================\n");
        jTextArea1.append("              Min-Max Normalization\n");
        jTextArea1.append("===============================================\n");
        jTextArea1.append(minMaxNormalizedData.trim()+"\n\n");*/
        
            // Step 2: Generate the current-generation population vector
        
        String XicommaG=CurGenPopVector(minMaxNormalizedData.trim());
        /*JOptionPane.showMessageDialog(this,"Current Generation Popoulation Vector Generated Successfully!");
        
        jTextArea1.append("===============================================\n");
        jTextArea1.append("     Current Generation Popoulation Vector\n");
        jTextArea1.append("===============================================\n");        
        jTextArea1.append(XicommaG.trim()+"\n\n");*/
        
        String sp[]=XicommaG.trim().split("\n");
        
        //while(true)  // Step 3
        //{
                // Step 4: Select the target vector at random, Xi,G.
            
            int r=(int)(Math.random()*sp.length);
            String targetVector=sp[r].trim();
            
            /*JOptionPane.showMessageDialog(this,"Target Vector Selected Successfully!");
            jTextArea1.append("===============================================\n");
            jTextArea1.append("                 Target Vector\n");
            jTextArea1.append("===============================================\n");
            jTextArea1.append(targetVector.trim()+"\n\n");*/
            
                // Step 5: Generate the mutant vector Mi;G by performing mutation with target vector Xi,G
            
            String MicommaG=GenMutantVector(XicommaG.trim(),targetVector.trim());
            /*JOptionPane.showMessageDialog(this,"Mutant Vector Generated Successfully!");
            jTextArea1.append("===============================================\n");
            jTextArea1.append("                 Mutant Vector\n");
            jTextArea1.append("===============================================\n");
            jTextArea1.append(MicommaG.trim()+"\n\n");*/
            
                // Step 7: Generate the trial vector using the crossover operation
            
            String TicommaG=GenTrialVectorUsingCrossOver(MicommaG.trim(),targetVector.trim());
            /*JOptionPane.showMessageDialog(this,"Trial Vector Generated Successfully!");
            jTextArea1.append("===============================================\n");
            jTextArea1.append("                 Trial Vector\n");
            jTextArea1.append("===============================================\n");
            jTextArea1.append(TicommaG.trim()+"\n\n");*/
            
            System.out.println("===========================");
            System.out.println("Reducted Features\tScore");
            System.out.println("===========================");
            
            double CR=0.5;   // CR means Crossover Rate
            String cp[]=TicommaG.trim().split("\n");
            
            String ofeatu="";
            for(int i=0;i<cp.length;i++)
            {
                if(i!=cp.length-1)
                {
                    String val[]=cp[i].trim().split(" --> ");
                    double crover=Double.parseDouble(val[1].trim());
                    if(crover>=CR)      // Step 8
                    {
                        String spk[]=val[0].trim().split(",");
                        ofeatu=ofeatu+spk[0].trim()+"\n";
                        System.out.println(spk[0].trim()+"\t"+crover);
                    }
                }
                else
                {
                    String val[]=cp[i].trim().split(" --> ");
                    String spk[]=val[0].trim().split(",");
                    ofeatu=ofeatu+spk[0].trim()+"\n";
                }
            }
            String optimalFeatures=ofeatu.substring(0,ofeatu.lastIndexOf('\n'));
            JOptionPane.showMessageDialog(this,"Feature Reducted Successfully!");
            jTextArea1.append("===============================================\n");
            jTextArea1.append("                    Reducted Features\n");
            jTextArea1.append("===============================================\n");
            jTextArea1.append(optimalFeatures.trim()+"\n\n");
            
            String spk[]=optimalFeatures.trim().split("\n");
            
            String sp1[]=dataset.trim().split("\n");        
            String spkc[]=sp1[0].trim().split(",");
            
            attribId=new ArrayList();
            for(int i=0;i<spk.length-1;i++)
            {
                for(int j=0;j<spkc.length;j++)
                {
                    if(spk[i].trim().equals(spkc[j].trim()))
                    {
                        attribId.add(j);
                        break;
                    }
                }
            }
            
            unwantedFeatures=new ArrayList();
            for(int j=0;j<spkc.length;j++)
            {
                if(!(attribId.contains(j)))
                {
                    unwantedFeatures.add(j);
                }
            }
            
            //System.out.println("Before: "+unwantedFeatures+"\n");
            
            if(unwantedFeatures.contains(spkc.length-1))
            {
                int index=unwantedFeatures.indexOf(spkc.length-1);
                unwantedFeatures.remove(index);
            }
            
            //System.out.println("After: "+unwantedFeatures+"\n");
            //System.out.println(spkc.length-1+"\n");
            //System.out.println(attribId+"\n\n\n");
            
        //}
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeatureReduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeatureReduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeatureReduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeatureReduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FeatureReduction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private String MinMaxNormalization(String dataset) {
        String sp[]=dataset.trim().split("\n");
        
        String spk[]=sp[0].trim().split(",");
        int noOfFeatures=spk.length;
        
        ArrayList normalized=new ArrayList();
        for(int j=0;j<noOfFeatures;j++)
        {
            if(j!=noOfFeatures-1)
            {
                double min=0,max=0;

                for(int i=1;i<sp.length;i++)
                {
                    String s[]=sp[i].trim().split(",");

                    double value = Double.parseDouble(s[j].trim());

                    if(i==1)
                    {
                        min=value;
                        max=value;
                    }

                    if(value<min)
                    {
                        min=value;
                    }
                    if(value>max)
                    {
                        max=value;
                    }
                }

                String coldat="";
                for(int i=1;i<sp.length;i++)
                {
                    String s[]=sp[i].trim().split(",");                
                    double value = Double.parseDouble(s[j].trim());

                    double normalization=(value-min)/(max-min);  // Formula Link: https://stats.stackexchange.com/questions/70801/how-to-normalize-data-to-0-1-range                  
                    coldat=coldat+df.format(normalization)+",";
                }
                String columndata=coldat.substring(0,coldat.lastIndexOf(','));
                normalized.add(columndata);
            }
            else
            {
                String coldat="";
                for(int i=1;i<sp.length;i++)
                {
                    String s[]=sp[i].trim().split(",");                                                        
                    coldat=coldat+s[j].trim()+",";
                }
                String columndata=coldat.substring(0,coldat.lastIndexOf(','));
                normalized.add(columndata);
            }
        }
        String val[]=normalized.get(0).toString().trim().split(",");
        
        String normalizedDat="";
        for(int j=0;j<val.length;j++)
        {
            String dat="";
            for(int i=0;i<normalized.size();i++)
            {
                String val1[]=normalized.get(i).toString().trim().split(",");
                dat=dat+val1[j].trim()+",";
            }
            String data=dat.substring(0,dat.lastIndexOf(','));
            normalizedDat=normalizedDat+data.trim()+"\n";
        }
        String normalizedData=normalizedDat.substring(0,normalizedDat.lastIndexOf('\n'));
        return sp[0].trim()+"\n"+normalizedData.trim();
    }

    private String CurGenPopVector(String minMaxNormalizedData) {
        String sp[]=minMaxNormalizedData.trim().split("\n");        
        String spk[]=sp[0].trim().split(",");
        
        String populvector="";
        for(int i=0;i<spk.length;i++)
        {
            String dat="";
            for(int j=0;j<sp.length;j++)
            {
                String spk1[]=sp[j].trim().split(",");
                dat=dat+spk1[i].trim()+",";                
            }
            String data=dat.substring(0,dat.lastIndexOf(','));
            populvector=populvector+data.trim()+"\n";
        }
        String PopulationVector=populvector.substring(0,populvector.lastIndexOf('\n'));
        return PopulationVector;
    }

    private String GenMutantVector(String XicommaG, String targetVector) {
        
        double F=0.5;   // F means positive control parameter
        
        String tv[]=targetVector.trim().split(",");
        
        String MiG="";
        String sp[]=XicommaG.trim().split("\n");        
        for(int i=0;i<sp.length-1;i++)
        {
            String xg[]=sp[i].trim().split(",");
            
                /* Step 6 */
            
            String miG="";
            for(int j=1;j<xg.length;j++)
            {
                try
                {                
                    double difference=F*Math.abs(Double.parseDouble(xg[j].trim())-Double.parseDouble(tv[j].trim()));
                    miG=miG+df.format(difference)+",";
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                    System.out.println("XicommaG: "+XicommaG+"\n");
                    System.out.println("sp[i]: "+sp[i]);
                    System.out.println("F: "+F);
                    System.out.println("xg[j]: "+xg[j].trim());
                    System.out.println("tv[j]: "+tv[j].trim());
                }
            }
            String miCommaG=xg[0].trim()+","+miG.substring(0,miG.lastIndexOf(','));
            if(!(targetVector.trim().equals(sp[i].trim())))
            {
                MiG=MiG+miCommaG+"\n";
            }
            else
            {
                MiG=MiG+sp[i].trim()+"\n";
            }
        }
        String MicommaG=MiG+sp[sp.length-1].trim();
        return MicommaG;
    }

    private String GenTrialVectorUsingCrossOver(String MicommaG, String targetVector) {        
        
        String tv[]=targetVector.trim().split(",");
        
        double min=0,max=0;
        String TiG="";
        String sp[]=MicommaG.trim().split("\n");        
        for(int i=0;i<sp.length-1;i++)
        {
            String xg[]=sp[i].trim().split(",");                            
            
            double valueAfterCrossOver=0;
            for(int j=1;j<xg.length;j++)
            {
                    // Apply Crossover
                
                if(Double.parseDouble(xg[j].trim())>Double.parseDouble(tv[j].trim()))
                {
                    valueAfterCrossOver=valueAfterCrossOver+Double.parseDouble(xg[j].trim());
                }
                else
                {
                    valueAfterCrossOver=valueAfterCrossOver+Double.parseDouble(tv[j].trim());
                }                
            }
            double crossOverValue=(double)(valueAfterCrossOver/(double)(xg.length-1));                                    
            String tiCommaG=sp[i].trim()+" --> "+crossOverValue;
            TiG=TiG+tiCommaG+"\n";
            
            if(i==1)
            {
                min=crossOverValue;
                max=crossOverValue;
            }
            if(crossOverValue<min)
            {
                min=crossOverValue;
            }
            if(crossOverValue>max)
            {
                max=crossOverValue;
            }
        }        
        
        String tg="";
        String cp[]=TiG.trim().split("\n");        
        for(int i=0;i<cp.length;i++)
        {
            String val[]=cp[i].trim().split(" --> ");
            String crover=val[1].trim();
            double normcrover=(Double.parseDouble(crover)-min)/(max-min);  // Formula Link: https://stats.stackexchange.com/questions/70801/how-to-normalize-data-to-0-1-range                  
            tg=tg+val[0].trim()+" --> "+df.format(normcrover)+"\n";
        }
        String TicommaG=tg+sp[sp.length-1].trim();
        return TicommaG;
    }
}
