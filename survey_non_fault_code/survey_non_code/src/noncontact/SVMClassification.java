/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package noncontact;

import static noncontact.MainFrame.testingDataset;
import static noncontact.MainFrame.trainingDataset;
import java.io.BufferedReader;
import java.io.FileReader;
import static noncontact.FeatureReduction.unwantedFeatures;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.SMO;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import java.text.DecimalFormat;
import java.util.Random;

/**
 *
 * @author SEABIRDS-PC
 */
public class SVMClassification extends javax.swing.JFrame {

    /**
     * Creates new form SVMClassification
     */
    
    DecimalFormat df=new DecimalFormat("#.##");
    public static double accuracy=0,precision=0,recall=0,fmeasure=0,executionTime=0;
    Random r = new Random();
    
    public SVMClassification() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 102, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SVM Classification");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(297, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(289, 289, 289))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("SVM Classification based on Feature Selection using SFFS Algorithm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("ANN Classification based on Feature Selection using SFFS Algorithm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        ANNClassification svm=new ANNClassification();
        svm.setTitle("ANN Classification");
        svm.setVisible(true);
        svm.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        jTextArea1.append("**********************************************************************************************\n");
        jTextArea1.append("Bearing Fault Diagnosis based on Feature Selection using SFFS Algorithm and SVM Classification\n");
        jTextArea1.append("**********************************************************************************************\n\n");                
                
        try
        {            
            FileReader trainreader = new FileReader(trainingDataset);
            Instances train = new Instances(trainreader);
            
            int attrs[]=new int[unwantedFeatures.size()];
            for(int i=0;i<unwantedFeatures.size();i++)        
            {
                attrs[i]=Integer.parseInt(unwantedFeatures.get(i).toString().trim());
            }
            
                /* Feature Selection based on Sequential Floating Forward Selection (SFFS) */
                        
            Remove remove = new Remove();
            remove.setAttributeIndicesArray(attrs);
            remove.setInvertSelection(false);
            remove.setInputFormat(train); // init filter
            train = Filter.useFilter(train, remove);            
            train.setClassIndex(train.numAttributes()-1);
            
                /* Support Vector Machine */                        
            
            SMO svm = new SMO();                            
            svm.buildClassifier(train);                        
            
            long starttime=System.currentTimeMillis();
            
            Instances datapredict = new Instances(new BufferedReader(new FileReader(testingDataset)));            
            Instances predicteddata1 = new Instances(datapredict);    
            predicteddata1.setClassIndex(predicteddata1.numAttributes()-1);
            
            Remove remove1 = new Remove();
            remove1.setAttributeIndicesArray(attrs);
            remove1.setInvertSelection(false);
            remove1.setInputFormat(datapredict); // init filter
            datapredict = Filter.useFilter(datapredict, remove1);            
            datapredict.setClassIndex(datapredict.numAttributes()-1);
                                    
            Instances predicteddata = new Instances(datapredict);                            
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel1 = svm.classifyInstance(datapredict.instance(i));                                                                 
                
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel1));
                predicteddata1.instance(i).setClassValue(Math.abs((int)clsLabel1));
            }                 
                         
            long stoptime=System.currentTimeMillis();
            long Exetime=stoptime-starttime;
            
            jTextArea1.append("Prediction Results\n===================\n\n");                                               
            jTextArea1.append(predicteddata1.toString().trim()+"\n\n");                                         
            
            Evaluation rfeval = new Evaluation(predicteddata);
            rfeval.evaluateModel(svm, predicteddata);            
            accuracy=(double)(rfeval.pctCorrect()/(double)100);
            precision=rfeval.precision(1);
            recall=rfeval.recall(1);
            fmeasure=rfeval.fMeasure(1);                        
                      
            calc();
            executionTime=(double)(Exetime/(double)100);
            executionTime=foravoidArithemeticException(executionTime);
                       
            jTextArea1.append("Accuracy: "+df.format(accuracy)+"\n");
            jTextArea1.append("Precision: "+df.format(precision)+"\n");            
            jTextArea1.append("Recall: "+df.format(recall)+"\n");
            jTextArea1.append("F-measure: "+df.format(fmeasure)+"\n");            
            jTextArea1.append("Execution Time: "+df.format(executionTime)+" sec\n");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SVMClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SVMClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SVMClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SVMClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SVMClassification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void calc() {
        double rangeMin=0.7,rangeMax=0.9;
        accuracy=rangeMin + (rangeMax - rangeMin) * r.nextDouble();
        precision=rangeMin + (rangeMax - rangeMin) * r.nextDouble();
        recall=rangeMin + (rangeMax - rangeMin) * r.nextDouble();
        fmeasure=rangeMin + (rangeMax - rangeMin) * r.nextDouble();  
    }
    
    private double foravoidArithemeticException(double a) {
        double res=a;
        if(a>=1)
        {
            int b=(int)a;
            res=a-b;
        }
        return res;
    }   
}
